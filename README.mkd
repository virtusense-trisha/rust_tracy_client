# Tracy profiler clients in Rust

This project contains Rust crates for producing [Tracy profiler](https://github.com/wolfpld/tracy)
traces. Tracy features nanosecond precision, ability to profile remotely and a full-featured
graphical interface for finding hot spots in profiled programs.

While Tracy's support for Rust is not first-class, it is still a very potent tool. If you have an
application instrumented with the `tracing` crate, Tracy can be used with your program in minutes
via the `tracing-tracy` crate. It can work well as both a profiling and, to a lesser extent,
an observability tool.

## Important note

Simply depending on crates in this repository is sufficient for tracy to be enabled at program
startup, even if none of the APIs provided by this crate are invoked. Tracy will broadcast
discovery packets to the local network and expose the data it collects in the background to that
same network. Traces collected by Tracy may include source and assembly code as well.

As thus, you may want make sure to only enable the `tracing-tracy`, `tracy-client` and
`tracy-client-sys` crates conditionally, via the `enable` feature flag provided by the crates.

## Version support table

This project, unlike Tracy itself, follows semantic versioning. We will publish a breaking version
bump whenever there is a breaking protocol change, even if the `Tracy` project itself does not. An
older version of `Tracy` being unable to communicate with the client of a more recent version is an
example of such a breaking change.

The following table lists the version correspondence between the libraries.

| Tracy | tracy-client-sys | tracy-client | tracing-tracy |
| ----- | ----- | ----- | ----- |
| 0.7.1 | 0.9.0 | 0.8.0 | 0.2.0 |
| 0.7.3 | 0.10.0 | 0.9.0 | 0.3.0 |
